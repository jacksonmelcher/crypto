{
  "contractName": "uniswap_exchange_custom",
  "abi": [
    {
      "name": "TokenPurchase",
      "inputs": [
        {
          "type": "address",
          "name": "buyer",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_sold",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "tokens_bought",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "EthPurchase",
      "inputs": [
        {
          "type": "address",
          "name": "buyer",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "tokens_sold",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_bought",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "AddLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_amount",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "token_amount",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "RemoveLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_amount",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "token_amount",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Transfer",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Approval",
      "inputs": [
        {
          "type": "address",
          "name": "_owner",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_spender",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "setup",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "token_addr"
        },
        {
          "type": "uint256",
          "name": "token_id"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 210890
    },
    {
      "name": "addLiquidity",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_liquidity"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 82616
    },
    {
      "name": "removeLiquidity",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        },
        {
          "type": "uint256",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 116814
    },
    {
      "name": "__default__",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": true,
      "type": "function"
    },
    {
      "name": "ethToTokenSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 12757
    },
    {
      "name": "ethToTokenTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 12965
    },
    {
      "name": "ethToTokenSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 50463
    },
    {
      "name": "ethToTokenTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 50671
    },
    {
      "name": "tokenToEthSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 47503
    },
    {
      "name": "tokenToEthTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 47712
    },
    {
      "name": "tokenToEthSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "eth_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 50175
    },
    {
      "name": "tokenToEthTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "eth_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 50384
    },
    {
      "name": "tokenToTokenSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "uint256",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 50968
    },
    {
      "name": "tokenToTokenTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "uint256",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 51059
    },
    {
      "name": "tokenToTokenSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "uint256",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 54889
    },
    {
      "name": "tokenToTokenTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "uint256",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 54980
    },
    {
      "name": "tokenToExchangeSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 49342
    },
    {
      "name": "tokenToExchangeTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 49532
    },
    {
      "name": "tokenToExchangeSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 53233
    },
    {
      "name": "tokenToExchangeTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 53423
    },
    {
      "name": "getEthToTokenInputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "eth_sold"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5542
    },
    {
      "name": "getEthToTokenOutputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6872
    },
    {
      "name": "getTokenToEthInputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5637
    },
    {
      "name": "getTokenToEthOutputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "eth_bought"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6897
    },
    {
      "name": "tokenAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1413
    },
    {
      "name": "factoryAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1443
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1645
    },
    {
      "name": "transfer",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 75034
    },
    {
      "name": "transferFrom",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 110907
    },
    {
      "name": "approve",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_spender"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 38769
    },
    {
      "name": "allowance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "address",
          "name": "_spender"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1925
    },
    {
      "name": "name",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1623
    },
    {
      "name": "symbol",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1653
    },
    {
      "name": "decimals",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1683
    },
    {
      "name": "totalSupply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1713
    }
  ],
  "bytecode": "0x61305b56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263f46d1982600051141561014257604060046101403734156100b457600080fd5b60043560205181106100c557600080fd5b506000610140511415600654156007541516166100e157600080fd5b3360075561014051600655610160516008557f556e6973776170205631000000000000000000000000000000000000000000006000557f554e492d563100000000000000000000000000000000000000000000000000006001556012600255005b63422f104360005114156105b25760606004610140376000341160006101605111164261018051111661017457600080fd5b6003546101a05260006101a0511115610445576000610140511161019757600080fd5b34303110156101a557600080fd5b343031036103a0526006543b6101ba57600080fd5b6006543014156101c957600080fd5b602061046060246370a082316103e05230610400526103fc6006545afa6101ef57600080fd5b600050610460516103c0526103a05161020757600080fd5b6103a051341515610219576000610236565b6103c051346103c0513402041461022f57600080fd5b6103c05134025b0460016103a05161024657600080fd5b6103a051341515610258576000610275565b6103c051346103c0513402041461026e57600080fd5b6103c05134025b0401101561028257600080fd5b60016103a05161029157600080fd5b6103a0513415156102a35760006102c0565b6103c051346103c051340204146102b957600080fd5b6103c05134025b0401610480526103a0516102d357600080fd5b6103a0513415156102e5576000610302565b6101a051346101a051340204146102fb57600080fd5b6101a05134025b046104a052610140516104a0511015610480516101605110151661032557600080fd5b60043360e05260c052604060c02080546104a051825401101561034757600080fd5b6104a0518154018155506101a0516104a0516101a05101101561036957600080fd5b6104a0516101a051016003556006543b61038257600080fd5b60065430141561039157600080fd5b602061058060646323b872dd6104c052336104e052306105005261048051610520526104dc60006006545af16103c657600080fd5b600050610580516103d657600080fd5b6104805134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a46104a0516105a0523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206105a0a36104a05160005260206000f36105b0565b633b9aca003410156000600654141560006007541415161661046657600080fd5b306007543b61047457600080fd5b60075430141561048357600080fd5b60206102406024630b9d58476101c0526008546101e0526101dc6007545afa6104ab57600080fd5b60005061024051146104bc57600080fd5b6101605161026052303161028052610280516003556102805160043360e05260c052604060c020556006543b6104f157600080fd5b60065430141561050057600080fd5b602061036060646323b872dd6102a052336102c052306102e05261026051610300526102bc60006006545af161053557600080fd5b6000506103605161054557600080fd5b6102605134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461028051610380523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610380a36102805160005260206000f35b005b63f88bf15a600051141561085157608060046101403734156105d357600080fd5b600061018051116000610160511116426101a051116000610140511116166105fa57600080fd5b6003546101c05260006101c0511161061157600080fd5b6006543b61061e57600080fd5b60065430141561062d57600080fd5b602061028060246370a0823161020052306102205261021c6006545afa61065357600080fd5b600050610280516101e0526101c05161066b57600080fd5b6101c0516101405115156106805760006106a0565b30316101405130316101405102041461069857600080fd5b303161014051025b046102a0526101c0516106b257600080fd5b6101c0516101405115156106c75760006106ed565b6101e051610140516101e051610140510204146106e357600080fd5b6101e05161014051025b046102c052610180516102c0511015610160516102a05110151661071057600080fd5b60043360e05260c052604060c020610140518154101561072f57600080fd5b61014051815403815550610140516101c051101561074c57600080fd5b610140516101c0510360035560006000600060006102a051336000f161077157600080fd5b6006543b61077e57600080fd5b60065430141561078d57600080fd5b6020610380604463a9059cbb6102e05233610300526102c051610320526102fc60006006545af16107bd57600080fd5b600050610380516107cd57600080fd5b6102c0516102a051337f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e860006000a4610140516103a0526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206103a0a360406103c0526103e06102a05181526102c0518160200152506103c0516103e0f3005b6000156109cd575b6101a05261014052610160526101805260006101805111600061016051111661088157600080fd5b6101405115156108925760006108b5565b6103e5610140516103e5610140510204146108ac57600080fd5b6103e561014051025b6101c0526101c05115156108ca5760006108f0565b610180516101c051610180516101c0510204146108e657600080fd5b610180516101c051025b6101e052610160511515610905576000610928565b6103e8610160516103e86101605102041461091f57600080fd5b6103e861016051025b6101c05161016051151561093d576000610960565b6103e8610160516103e86101605102041461095757600080fd5b6103e861016051025b01101561096c57600080fd5b6101c0516101605115156109815760006109a4565b6103e8610160516103e86101605102041461099b57600080fd5b6103e861016051025b0161020052610200516109b657600080fd5b610200516101e051046000526000516101a0515650005b600015610bfa575b6101a0526101405261016052610180526000610180511160006101605111166109fd57600080fd5b610160511515610a0e576000610a34565b61014051610160516101405161016051020414610a2a57600080fd5b6101405161016051025b1515610a41576000610afd565b6103e8610160511515610a55576000610a7b565b61014051610160516101405161016051020414610a7157600080fd5b6101405161016051025b6103e8610160511515610a8f576000610ab5565b61014051610160516101405161016051020414610aab57600080fd5b6101405161016051025b020414610ac157600080fd5b6103e8610160511515610ad5576000610afb565b61014051610160516101405161016051020414610af157600080fd5b6101405161016051025b025b6101c05261014051610180511015610b1457600080fd5b6101405161018051031515610b2a576000610b95565b6103e561014051610180511015610b4057600080fd5b6101405161018051036103e561014051610180511015610b5f57600080fd5b610140516101805103020414610b7457600080fd5b6103e561014051610180511015610b8a57600080fd5b610140516101805103025b6101e0526101e051610ba657600080fd5b6101e0516101c0510460016101e051610bbe57600080fd5b6101e0516101c05104011015610bd357600080fd5b60016101e051610be257600080fd5b6101e0516101c05104016000526000516101a0515650005b600015610dfb575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610c3a57600080fd5b6006543b610c4757600080fd5b600654301415610c5657600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610c7c57600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516389f2a8716102e05261014051610300526101405130311015610cdd57600080fd5b6101405130310361032052610200516103405261034051610320516103005160065801610859565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c052610160516102c0511015610d5857600080fd5b6006543b610d6557600080fd5b600654301415610d7457600080fd5b6020610460604463a9059cbb6103c0526101c0516103e0526102c051610400526103dc60006006545af1610da757600080fd5b60005061046051610db757600080fd5b6102c051610140516101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a46102c0516000526000516101e0515650005b63f39b5b9b6000511415610e785760406004610140376101405161016051638c717a3361018052346101a052610140516101c052610160516101e0523361020052336102205261022051610200516101e0516101c0516101a05160065801610c02565b6102805261016052610140526102805160005260206000f3005b63ad65d76d6000511415610f2b5760606004610140376044356020518110610e9f57600080fd5b5060006101805114153061018051141516610eb957600080fd5b610140516101605161018051638c717a336101a052346101c052610140516101e0526101605161020052336102205261018051610240526102405161022051610200516101e0516101c05160065801610c02565b6102a0526101805261016052610140526102a05160005260206000f3005b600015611173575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610f6b57600080fd5b6006543b610f7857600080fd5b600654301415610f8757600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610fad57600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c05163fd11c2236102e0526101405161030052610160513031101561100e57600080fd5b61016051303103610320526102005161034052610340516103205161030051600658016109d5565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c05260016102c051026103e0526103e05161016051101561109457600080fd5b6103e05161016051036103c05260006103c05111156110ca5760006000600060006103c0516101a0516000f16110c957600080fd5b5b6006543b6110d757600080fd5b6006543014156110e657600080fd5b60206104a0604463a9059cbb610400526101c05161042052610140516104405261041c60006006545af161111957600080fd5b6000506104a05161112957600080fd5b6101405160016102c051026101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a460016102c051026000526000516101e0515650005b636b1d4db760005114156111f05760406004610140376101405161016051632dff394e61018052610140516101a052346101c052610160516101e0523361020052336102205261022051610200516101e0516101c0516101a05160065801610f33565b6102805261016052610140526102805160005260206000f3005b630b57363860005114156112a3576060600461014037604435602051811061121757600080fd5b506000610180511415306101805114151661123157600080fd5b610140516101605161018051632dff394e6101a052610140516101c052346101e0526101605161020052336102205261018051610240526102405161022051610200516101e0516101c05160065801610f33565b6102a0526101805261016052610140526102a05160005260206000f3005b6000156114ba575b6101e0526101405261016052610180526101a0526101c05260006101605111600061014051111642610180511015166112e357600080fd5b6006543b6112f057600080fd5b6006543014156112ff57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61132557600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516389f2a8716102e0526101405161030052610200516103205230316103405261034051610320516103005160065801610859565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c05260016102c051026103c052610160516103c05110156113f657600080fd5b60006000600060006103c0516101c0516000f161141257600080fd5b6006543b61141f57600080fd5b60065430141561142e57600080fd5b60206104a060646323b872dd6103e0526101a05161040052306104205261014051610440526103fc60006006545af161146657600080fd5b6000506104a05161147657600080fd5b6103c051610140516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c0516000526000516101e0515650005b6395e3c50b600051141561154d57606060046101403734156114db57600080fd5b61014051610160516101805163fa1bb7be6101a052610140516101c052610160516101e0526101805161020052336102205233610240526102405161022051610200516101e0516101c051600658016112ab565b6102a0526101805261016052610140526102a05160005260206000f3005b637237e0316000511415611616576080600461014037341561156e57600080fd5b606435602051811061157f57600080fd5b5060006101a0511415306101a05114151661159957600080fd5b6101405161016051610180516101a05163fa1bb7be6101c052610140516101e0526101605161020052610180516102205233610240526101a05161026052610260516102405161022051610200516101e051600658016112ab565b6102c0526101a0526101805261016052610140526102c05160005260206000f3005b60001561181a575b6101e0526101405261016052610180526101a0526101c05260006101405111426101805110151661164e57600080fd5b6006543b61165b57600080fd5b60065430141561166a57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61169057600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c05163fd11c2236102e05261014051610300526102005161032052303161034052610340516103205161030051600658016109d5565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c0526102c05161016051101561175657600080fd5b6000600060006000610140516101c0516000f161177257600080fd5b6006543b61177f57600080fd5b60065430141561178e57600080fd5b602061048060646323b872dd6103c0526101a0516103e05230610400526102c051610420526103dc60006006545af16117c657600080fd5b600050610480516117d657600080fd5b610140516102c0516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46102c0516000526000516101e0515650005b63013efd8b60005114156118ad576060600461014037341561183b57600080fd5b61014051610160516101805163984fe8f66101a052610140516101c052610160516101e0526101805161020052336102205233610240526102405161022051610200516101e0516101c0516006580161161e565b6102a0526101805261016052610140526102a05160005260206000f3005b63d4e4841d600051141561197657608060046101403734156118ce57600080fd5b60643560205181106118df57600080fd5b5060006101a0511415306101a0511415166118f957600080fd5b6101405161016051610180516101a05163984fe8f66101c052610140516101e0526101605161020052610180516102205233610240526101a05161026052610260516102405161022051610200516101e0516006580161161e565b6102c0526101a0526101805261016052610140526102c05160005260206000f3005b600015611c11575b610220526101405261016052610180526101a0526101c0526101e0526102005260006101805111600061016051111660006101405111426101a051101516166119c657600080fd5b600061020051141530610200511415166119df57600080fd5b6006543b6119ec57600080fd5b6006543014156119fb57600080fd5b60206102e060246370a0823161026052306102805261027c6006545afa611a2157600080fd5b6000506102e051610240526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516389f2a871610320526101405161034052610240516103605230316103805261038051610360516103405160065801610859565b6103e052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e05161030052600161030051026104005261018051610400511015611b0257600080fd5b6006543b611b0f57600080fd5b600654301415611b1e57600080fd5b60206104e060646323b872dd610420526101c051610440523061046052610140516104805261043c60006006545af1611b5657600080fd5b6000506104e051611b6657600080fd5b610200513b611b7457600080fd5b61020051301415611b8457600080fd5b60206105e0606463ad65d76d6105205261016051610540526101a051610560526101e0516105805261053c61040051610200515af1611bc257600080fd5b6000506105e0516105005261040051610140516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a461050051600052600051610220515650005b637c3755c46000511415611d4c5760a06004610140373415611c3257600080fd5b6007543b611c3f57600080fd5b600754301415611c4e57600080fd5b60206102806024630b9d5847610200526101c0516102205261021c6007545afa611c7757600080fd5b600050610280516101e0526101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516102805163204ea33b6102a052610140516102c052610160516102e05261018051610300526101a05161032052336103405233610360526101e0516103805261038051610360516103405161032051610300516102e0516102c0516006580161197e565b6103e05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e05160005260206000f3005b6391ff65e46000511415611ea45760c06004610140373415611d6d57600080fd5b6084356020518110611d7e57600080fd5b506007543b611d8c57600080fd5b600754301415611d9b57600080fd5b60206102a06024630b9d5847610220526101e0516102405261023c6007545afa611dc457600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a05163204ea33b6102c052610140516102e052610160516103005261018051610320526101a0516103405233610360526101c05161038052610200516103a0526103a05161038051610360516103405161032051610300516102e0516006580161197e565b610400526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526104005160005260206000f3005b6000156121ba575b610220526101405261016052610180526101a0526101c0526101e05261020052600061018051116000610140511116426101a051101516611eec57600080fd5b60006102005114153061020051141516611f0557600080fd5b610200513b611f1357600080fd5b61020051301415611f2357600080fd5b60206102e060246359e9486261026052610140516102805261027c610200515afa611f4d57600080fd5b6000506102e051610240526006543b611f6557600080fd5b600654301415611f7457600080fd5b60206103a060246370a0823161032052306103405261033c6006545afa611f9a57600080fd5b6000506103a051610300526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c05163fd11c2236103e05261024051610400526103005161042052303161044052610440516104205161040051600658016109d5565b6104a0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526104a0516103c052610240516101805110156103c051610160511015166120ab57600080fd5b6006543b6120b857600080fd5b6006543014156120c757600080fd5b602061058060646323b872dd6104c0526101c0516104e05230610500526103c051610520526104dc60006006545af16120ff57600080fd5b6000506105805161210f57600080fd5b610200513b61211d57600080fd5b6102005130141561212d57600080fd5b60206106806064630b5736386105c052610140516105e0526101a051610600526101e051610620526105dc61024051610200515af161216b57600080fd5b600050610680516105a052610240516103c0516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c051600052600051610220515650005b63766b1f9360005114156122f55760a060046101403734156121db57600080fd5b6007543b6121e857600080fd5b6007543014156121f757600080fd5b60206102806024630b9d5847610200526101c0516102205261021c6007545afa61222057600080fd5b600050610280516101e0526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051631a7b28f26102a052610140516102c052610160516102e05261018051610300526101a05161032052336103405233610360526101e0516103805261038051610360516103405161032051610300516102e0516102c05160065801611eac565b6103e05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e05160005260206000f3005b6377967926600051141561244d5760c0600461014037341561231657600080fd5b608435602051811061232757600080fd5b506007543b61233557600080fd5b60075430141561234457600080fd5b60206102a06024630b9d5847610220526101e0516102405261023c6007545afa61236d57600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a051631a7b28f26102c052610140516102e052610160516103005261018051610320526101a0516103405233610360526101c05161038052610200516103a0526103a05161038051610360516103405161032051610300516102e05160065801611eac565b610400526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526104005160005260206000f3005b63b1cb43bf600051141561251a5760a0600461014037341561246e57600080fd5b608435602051811061247f57600080fd5b506101405161016051610180516101a0516101c05163204ea33b6101e0526101405161020052610160516102205261018051610240526101a051610260523361028052336102a0526101c0516102c0526102c0516102a05161028051610260516102405161022051610200516006580161197e565b610320526101c0526101a0526101805261016052610140526103205160005260206000f3005b63ec384a3e60005114156126145760c0600461014037341561253b57600080fd5b608435602051811061254c57600080fd5b5060a435602051811061255e57600080fd5b50306101c051141561256f57600080fd5b6101405161016051610180516101a0516101c0516101e05163204ea33b610200526101405161022052610160516102405261018051610260526101a05161028052336102a0526101c0516102c0526101e0516102e0526102e0516102c0516102a051610280516102605161024051610220516006580161197e565b610340526101e0526101c0526101a0526101805261016052610140526103405160005260206000f3005b63ea650c7d60005114156126e15760a0600461014037341561263557600080fd5b608435602051811061264657600080fd5b506101405161016051610180516101a0516101c051631a7b28f26101e0526101405161020052610160516102205261018051610240526101a051610260523361028052336102a0526101c0516102c0526102c0516102a051610280516102605161024051610220516102005160065801611eac565b610320526101c0526101a0526101805261016052610140526103205160005260206000f3005b63981a132760005114156127db5760c0600461014037341561270257600080fd5b608435602051811061271357600080fd5b5060a435602051811061272557600080fd5b50306101c051141561273657600080fd5b6101405161016051610180516101a0516101c0516101e051631a7b28f2610200526101405161022052610160516102405261018051610260526101a05161028052336102a0526101c0516102c0526101e0516102e0526102e0516102c0516102a0516102805161026051610240516102205160065801611eac565b610340526101e0526101c0526101a0526101805261016052610140526103405160005260206000f3005b63cd7724c360005114156128d757602060046101403734156127fc57600080fd5b6000610140511161280c57600080fd5b6006543b61281957600080fd5b60065430141561282857600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61284e57600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e051610200516389f2a871610220526101405161024052303161026052610160516102805261028051610260516102405160065801610859565b6102e052610200526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f3005b6359e9486260005114156129e657602060046101403734156128f857600080fd5b6000610140511161290857600080fd5b6006543b61291557600080fd5b60065430141561292457600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61294a57600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e051610200516102205163fd11c223610240526101405161026052303161028052610160516102a0526102a0516102805161026051600658016109d5565b6103005261022052610200526101e0526101c0526101a05261018052610160526101405261030051610220526001610220510260005260206000f3005b6395b68fe76000511415612af55760206004610140373415612a0757600080fd5b60006101405111612a1757600080fd5b6006543b612a2457600080fd5b600654301415612a3357600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa612a5957600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e05161020051610220516389f2a871610240526101405161026052610160516102805230316102a0526102a051610280516102605160065801610859565b6103005261022052610200526101e0526101c0526101a05261018052610160526101405261030051610220526001610220510260005260206000f3005b632640f62c6000511415612bf15760206004610140373415612b1657600080fd5b60006101405111612b2657600080fd5b6006543b612b3357600080fd5b600654301415612b4257600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa612b6857600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e0516102005163fd11c2236102205261014051610240526101605161026052303161028052610280516102605161024051600658016109d5565b6102e052610200526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f3005b639d76ea586000511415612c17573415612c0a57600080fd5b60065460005260206000f3005b63966dae0e6000511415612c3d573415612c3057600080fd5b60075460005260206000f3005b6370a082316000511415612c8c5760206004610140373415612c5e57600080fd5b6004356020518110612c6f57600080fd5b5060046101405160e05260c052604060c0205460005260206000f3005b63a9059cbb6000511415612d575760406004610140373415612cad57600080fd5b6004356020518110612cbe57600080fd5b5060043360e05260c052604060c0206101605181541015612cde57600080fd5b6101605181540381555060046101405160e05260c052604060c0208054610160518254011015612d0d57600080fd5b61016051815401815550610160516101805261014051337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610180a3600160005260206000f3005b6323b872dd6000511415612e725760606004610140373415612d7857600080fd5b6004356020518110612d8957600080fd5b506024356020518110612d9b57600080fd5b5060046101405160e05260c052604060c0206101805181541015612dbe57600080fd5b6101805181540381555060046101605160e05260c052604060c0208054610180518254011015612ded57600080fd5b6101805181540181555060056101405160e05260c052604060c0203360e05260c052604060c0206101805181541015612e2557600080fd5b61018051815403815550610180516101a05261016051610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a3600160005260206000f3005b63095ea7b36000511415612f075760406004610140373415612e9357600080fd5b6004356020518110612ea457600080fd5b506101605160053360e05260c052604060c0206101405160e05260c052604060c02055610160516101805261014051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610180a3600160005260206000f3005b63dd62ed3e6000511415612f775760406004610140373415612f2857600080fd5b6004356020518110612f3957600080fd5b506024356020518110612f4b57600080fd5b5060056101405160e05260c052604060c0206101605160e05260c052604060c0205460005260206000f3005b6306fdde036000511415612f9d573415612f9057600080fd5b60005460005260206000f3005b6395d89b416000511415612fc3573415612fb657600080fd5b60015460005260206000f3005b63313ce5676000511415612fe9573415612fdc57600080fd5b60025460005260206000f3005b6318160ddd600051141561300f57341561300257600080fd5b60035460005260206000f3005b638c717a33610140523461016052600161018052426101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610c02565b610240526102405b61000461305b0361000460003961000461305b036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263f46d1982600051141561014257604060046101403734156100b457600080fd5b60043560205181106100c557600080fd5b506000610140511415600654156007541516166100e157600080fd5b3360075561014051600655610160516008557f556e6973776170205631000000000000000000000000000000000000000000006000557f554e492d563100000000000000000000000000000000000000000000000000006001556012600255005b63422f104360005114156105b25760606004610140376000341160006101605111164261018051111661017457600080fd5b6003546101a05260006101a0511115610445576000610140511161019757600080fd5b34303110156101a557600080fd5b343031036103a0526006543b6101ba57600080fd5b6006543014156101c957600080fd5b602061046060246370a082316103e05230610400526103fc6006545afa6101ef57600080fd5b600050610460516103c0526103a05161020757600080fd5b6103a051341515610219576000610236565b6103c051346103c0513402041461022f57600080fd5b6103c05134025b0460016103a05161024657600080fd5b6103a051341515610258576000610275565b6103c051346103c0513402041461026e57600080fd5b6103c05134025b0401101561028257600080fd5b60016103a05161029157600080fd5b6103a0513415156102a35760006102c0565b6103c051346103c051340204146102b957600080fd5b6103c05134025b0401610480526103a0516102d357600080fd5b6103a0513415156102e5576000610302565b6101a051346101a051340204146102fb57600080fd5b6101a05134025b046104a052610140516104a0511015610480516101605110151661032557600080fd5b60043360e05260c052604060c02080546104a051825401101561034757600080fd5b6104a0518154018155506101a0516104a0516101a05101101561036957600080fd5b6104a0516101a051016003556006543b61038257600080fd5b60065430141561039157600080fd5b602061058060646323b872dd6104c052336104e052306105005261048051610520526104dc60006006545af16103c657600080fd5b600050610580516103d657600080fd5b6104805134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a46104a0516105a0523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206105a0a36104a05160005260206000f36105b0565b633b9aca003410156000600654141560006007541415161661046657600080fd5b306007543b61047457600080fd5b60075430141561048357600080fd5b60206102406024630b9d58476101c0526008546101e0526101dc6007545afa6104ab57600080fd5b60005061024051146104bc57600080fd5b6101605161026052303161028052610280516003556102805160043360e05260c052604060c020556006543b6104f157600080fd5b60065430141561050057600080fd5b602061036060646323b872dd6102a052336102c052306102e05261026051610300526102bc60006006545af161053557600080fd5b6000506103605161054557600080fd5b6102605134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461028051610380523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610380a36102805160005260206000f35b005b63f88bf15a600051141561085157608060046101403734156105d357600080fd5b600061018051116000610160511116426101a051116000610140511116166105fa57600080fd5b6003546101c05260006101c0511161061157600080fd5b6006543b61061e57600080fd5b60065430141561062d57600080fd5b602061028060246370a0823161020052306102205261021c6006545afa61065357600080fd5b600050610280516101e0526101c05161066b57600080fd5b6101c0516101405115156106805760006106a0565b30316101405130316101405102041461069857600080fd5b303161014051025b046102a0526101c0516106b257600080fd5b6101c0516101405115156106c75760006106ed565b6101e051610140516101e051610140510204146106e357600080fd5b6101e05161014051025b046102c052610180516102c0511015610160516102a05110151661071057600080fd5b60043360e05260c052604060c020610140518154101561072f57600080fd5b61014051815403815550610140516101c051101561074c57600080fd5b610140516101c0510360035560006000600060006102a051336000f161077157600080fd5b6006543b61077e57600080fd5b60065430141561078d57600080fd5b6020610380604463a9059cbb6102e05233610300526102c051610320526102fc60006006545af16107bd57600080fd5b600050610380516107cd57600080fd5b6102c0516102a051337f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e860006000a4610140516103a0526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206103a0a360406103c0526103e06102a05181526102c0518160200152506103c0516103e0f3005b6000156109cd575b6101a05261014052610160526101805260006101805111600061016051111661088157600080fd5b6101405115156108925760006108b5565b6103e5610140516103e5610140510204146108ac57600080fd5b6103e561014051025b6101c0526101c05115156108ca5760006108f0565b610180516101c051610180516101c0510204146108e657600080fd5b610180516101c051025b6101e052610160511515610905576000610928565b6103e8610160516103e86101605102041461091f57600080fd5b6103e861016051025b6101c05161016051151561093d576000610960565b6103e8610160516103e86101605102041461095757600080fd5b6103e861016051025b01101561096c57600080fd5b6101c0516101605115156109815760006109a4565b6103e8610160516103e86101605102041461099b57600080fd5b6103e861016051025b0161020052610200516109b657600080fd5b610200516101e051046000526000516101a0515650005b600015610bfa575b6101a0526101405261016052610180526000610180511160006101605111166109fd57600080fd5b610160511515610a0e576000610a34565b61014051610160516101405161016051020414610a2a57600080fd5b6101405161016051025b1515610a41576000610afd565b6103e8610160511515610a55576000610a7b565b61014051610160516101405161016051020414610a7157600080fd5b6101405161016051025b6103e8610160511515610a8f576000610ab5565b61014051610160516101405161016051020414610aab57600080fd5b6101405161016051025b020414610ac157600080fd5b6103e8610160511515610ad5576000610afb565b61014051610160516101405161016051020414610af157600080fd5b6101405161016051025b025b6101c05261014051610180511015610b1457600080fd5b6101405161018051031515610b2a576000610b95565b6103e561014051610180511015610b4057600080fd5b6101405161018051036103e561014051610180511015610b5f57600080fd5b610140516101805103020414610b7457600080fd5b6103e561014051610180511015610b8a57600080fd5b610140516101805103025b6101e0526101e051610ba657600080fd5b6101e0516101c0510460016101e051610bbe57600080fd5b6101e0516101c05104011015610bd357600080fd5b60016101e051610be257600080fd5b6101e0516101c05104016000526000516101a0515650005b600015610dfb575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610c3a57600080fd5b6006543b610c4757600080fd5b600654301415610c5657600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610c7c57600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516389f2a8716102e05261014051610300526101405130311015610cdd57600080fd5b6101405130310361032052610200516103405261034051610320516103005160065801610859565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c052610160516102c0511015610d5857600080fd5b6006543b610d6557600080fd5b600654301415610d7457600080fd5b6020610460604463a9059cbb6103c0526101c0516103e0526102c051610400526103dc60006006545af1610da757600080fd5b60005061046051610db757600080fd5b6102c051610140516101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a46102c0516000526000516101e0515650005b63f39b5b9b6000511415610e785760406004610140376101405161016051638c717a3361018052346101a052610140516101c052610160516101e0523361020052336102205261022051610200516101e0516101c0516101a05160065801610c02565b6102805261016052610140526102805160005260206000f3005b63ad65d76d6000511415610f2b5760606004610140376044356020518110610e9f57600080fd5b5060006101805114153061018051141516610eb957600080fd5b610140516101605161018051638c717a336101a052346101c052610140516101e0526101605161020052336102205261018051610240526102405161022051610200516101e0516101c05160065801610c02565b6102a0526101805261016052610140526102a05160005260206000f3005b600015611173575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610f6b57600080fd5b6006543b610f7857600080fd5b600654301415610f8757600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610fad57600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c05163fd11c2236102e0526101405161030052610160513031101561100e57600080fd5b61016051303103610320526102005161034052610340516103205161030051600658016109d5565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c05260016102c051026103e0526103e05161016051101561109457600080fd5b6103e05161016051036103c05260006103c05111156110ca5760006000600060006103c0516101a0516000f16110c957600080fd5b5b6006543b6110d757600080fd5b6006543014156110e657600080fd5b60206104a0604463a9059cbb610400526101c05161042052610140516104405261041c60006006545af161111957600080fd5b6000506104a05161112957600080fd5b6101405160016102c051026101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a460016102c051026000526000516101e0515650005b636b1d4db760005114156111f05760406004610140376101405161016051632dff394e61018052610140516101a052346101c052610160516101e0523361020052336102205261022051610200516101e0516101c0516101a05160065801610f33565b6102805261016052610140526102805160005260206000f3005b630b57363860005114156112a3576060600461014037604435602051811061121757600080fd5b506000610180511415306101805114151661123157600080fd5b610140516101605161018051632dff394e6101a052610140516101c052346101e0526101605161020052336102205261018051610240526102405161022051610200516101e0516101c05160065801610f33565b6102a0526101805261016052610140526102a05160005260206000f3005b6000156114ba575b6101e0526101405261016052610180526101a0526101c05260006101605111600061014051111642610180511015166112e357600080fd5b6006543b6112f057600080fd5b6006543014156112ff57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61132557600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516389f2a8716102e0526101405161030052610200516103205230316103405261034051610320516103005160065801610859565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c05260016102c051026103c052610160516103c05110156113f657600080fd5b60006000600060006103c0516101c0516000f161141257600080fd5b6006543b61141f57600080fd5b60065430141561142e57600080fd5b60206104a060646323b872dd6103e0526101a05161040052306104205261014051610440526103fc60006006545af161146657600080fd5b6000506104a05161147657600080fd5b6103c051610140516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c0516000526000516101e0515650005b6395e3c50b600051141561154d57606060046101403734156114db57600080fd5b61014051610160516101805163fa1bb7be6101a052610140516101c052610160516101e0526101805161020052336102205233610240526102405161022051610200516101e0516101c051600658016112ab565b6102a0526101805261016052610140526102a05160005260206000f3005b637237e0316000511415611616576080600461014037341561156e57600080fd5b606435602051811061157f57600080fd5b5060006101a0511415306101a05114151661159957600080fd5b6101405161016051610180516101a05163fa1bb7be6101c052610140516101e0526101605161020052610180516102205233610240526101a05161026052610260516102405161022051610200516101e051600658016112ab565b6102c0526101a0526101805261016052610140526102c05160005260206000f3005b60001561181a575b6101e0526101405261016052610180526101a0526101c05260006101405111426101805110151661164e57600080fd5b6006543b61165b57600080fd5b60065430141561166a57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61169057600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c05163fd11c2236102e05261014051610300526102005161032052303161034052610340516103205161030051600658016109d5565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c0526102c05161016051101561175657600080fd5b6000600060006000610140516101c0516000f161177257600080fd5b6006543b61177f57600080fd5b60065430141561178e57600080fd5b602061048060646323b872dd6103c0526101a0516103e05230610400526102c051610420526103dc60006006545af16117c657600080fd5b600050610480516117d657600080fd5b610140516102c0516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46102c0516000526000516101e0515650005b63013efd8b60005114156118ad576060600461014037341561183b57600080fd5b61014051610160516101805163984fe8f66101a052610140516101c052610160516101e0526101805161020052336102205233610240526102405161022051610200516101e0516101c0516006580161161e565b6102a0526101805261016052610140526102a05160005260206000f3005b63d4e4841d600051141561197657608060046101403734156118ce57600080fd5b60643560205181106118df57600080fd5b5060006101a0511415306101a0511415166118f957600080fd5b6101405161016051610180516101a05163984fe8f66101c052610140516101e0526101605161020052610180516102205233610240526101a05161026052610260516102405161022051610200516101e0516006580161161e565b6102c0526101a0526101805261016052610140526102c05160005260206000f3005b600015611c11575b610220526101405261016052610180526101a0526101c0526101e0526102005260006101805111600061016051111660006101405111426101a051101516166119c657600080fd5b600061020051141530610200511415166119df57600080fd5b6006543b6119ec57600080fd5b6006543014156119fb57600080fd5b60206102e060246370a0823161026052306102805261027c6006545afa611a2157600080fd5b6000506102e051610240526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516389f2a871610320526101405161034052610240516103605230316103805261038051610360516103405160065801610859565b6103e052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e05161030052600161030051026104005261018051610400511015611b0257600080fd5b6006543b611b0f57600080fd5b600654301415611b1e57600080fd5b60206104e060646323b872dd610420526101c051610440523061046052610140516104805261043c60006006545af1611b5657600080fd5b6000506104e051611b6657600080fd5b610200513b611b7457600080fd5b61020051301415611b8457600080fd5b60206105e0606463ad65d76d6105205261016051610540526101a051610560526101e0516105805261053c61040051610200515af1611bc257600080fd5b6000506105e0516105005261040051610140516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a461050051600052600051610220515650005b637c3755c46000511415611d4c5760a06004610140373415611c3257600080fd5b6007543b611c3f57600080fd5b600754301415611c4e57600080fd5b60206102806024630b9d5847610200526101c0516102205261021c6007545afa611c7757600080fd5b600050610280516101e0526101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516102805163204ea33b6102a052610140516102c052610160516102e05261018051610300526101a05161032052336103405233610360526101e0516103805261038051610360516103405161032051610300516102e0516102c0516006580161197e565b6103e05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e05160005260206000f3005b6391ff65e46000511415611ea45760c06004610140373415611d6d57600080fd5b6084356020518110611d7e57600080fd5b506007543b611d8c57600080fd5b600754301415611d9b57600080fd5b60206102a06024630b9d5847610220526101e0516102405261023c6007545afa611dc457600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a05163204ea33b6102c052610140516102e052610160516103005261018051610320526101a0516103405233610360526101c05161038052610200516103a0526103a05161038051610360516103405161032051610300516102e0516006580161197e565b610400526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526104005160005260206000f3005b6000156121ba575b610220526101405261016052610180526101a0526101c0526101e05261020052600061018051116000610140511116426101a051101516611eec57600080fd5b60006102005114153061020051141516611f0557600080fd5b610200513b611f1357600080fd5b61020051301415611f2357600080fd5b60206102e060246359e9486261026052610140516102805261027c610200515afa611f4d57600080fd5b6000506102e051610240526006543b611f6557600080fd5b600654301415611f7457600080fd5b60206103a060246370a0823161032052306103405261033c6006545afa611f9a57600080fd5b6000506103a051610300526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c05163fd11c2236103e05261024051610400526103005161042052303161044052610440516104205161040051600658016109d5565b6104a0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526104a0516103c052610240516101805110156103c051610160511015166120ab57600080fd5b6006543b6120b857600080fd5b6006543014156120c757600080fd5b602061058060646323b872dd6104c0526101c0516104e05230610500526103c051610520526104dc60006006545af16120ff57600080fd5b6000506105805161210f57600080fd5b610200513b61211d57600080fd5b6102005130141561212d57600080fd5b60206106806064630b5736386105c052610140516105e0526101a051610600526101e051610620526105dc61024051610200515af161216b57600080fd5b600050610680516105a052610240516103c0516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c051600052600051610220515650005b63766b1f9360005114156122f55760a060046101403734156121db57600080fd5b6007543b6121e857600080fd5b6007543014156121f757600080fd5b60206102806024630b9d5847610200526101c0516102205261021c6007545afa61222057600080fd5b600050610280516101e0526101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051631a7b28f26102a052610140516102c052610160516102e05261018051610300526101a05161032052336103405233610360526101e0516103805261038051610360516103405161032051610300516102e0516102c05160065801611eac565b6103e05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e05160005260206000f3005b6377967926600051141561244d5760c0600461014037341561231657600080fd5b608435602051811061232757600080fd5b506007543b61233557600080fd5b60075430141561234457600080fd5b60206102a06024630b9d5847610220526101e0516102405261023c6007545afa61236d57600080fd5b6000506102a051610200526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a051631a7b28f26102c052610140516102e052610160516103005261018051610320526101a0516103405233610360526101c05161038052610200516103a0526103a05161038051610360516103405161032051610300516102e05160065801611eac565b610400526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526104005160005260206000f3005b63b1cb43bf600051141561251a5760a0600461014037341561246e57600080fd5b608435602051811061247f57600080fd5b506101405161016051610180516101a0516101c05163204ea33b6101e0526101405161020052610160516102205261018051610240526101a051610260523361028052336102a0526101c0516102c0526102c0516102a05161028051610260516102405161022051610200516006580161197e565b610320526101c0526101a0526101805261016052610140526103205160005260206000f3005b63ec384a3e60005114156126145760c0600461014037341561253b57600080fd5b608435602051811061254c57600080fd5b5060a435602051811061255e57600080fd5b50306101c051141561256f57600080fd5b6101405161016051610180516101a0516101c0516101e05163204ea33b610200526101405161022052610160516102405261018051610260526101a05161028052336102a0526101c0516102c0526101e0516102e0526102e0516102c0516102a051610280516102605161024051610220516006580161197e565b610340526101e0526101c0526101a0526101805261016052610140526103405160005260206000f3005b63ea650c7d60005114156126e15760a0600461014037341561263557600080fd5b608435602051811061264657600080fd5b506101405161016051610180516101a0516101c051631a7b28f26101e0526101405161020052610160516102205261018051610240526101a051610260523361028052336102a0526101c0516102c0526102c0516102a051610280516102605161024051610220516102005160065801611eac565b610320526101c0526101a0526101805261016052610140526103205160005260206000f3005b63981a132760005114156127db5760c0600461014037341561270257600080fd5b608435602051811061271357600080fd5b5060a435602051811061272557600080fd5b50306101c051141561273657600080fd5b6101405161016051610180516101a0516101c0516101e051631a7b28f2610200526101405161022052610160516102405261018051610260526101a05161028052336102a0526101c0516102c0526101e0516102e0526102e0516102c0516102a0516102805161026051610240516102205160065801611eac565b610340526101e0526101c0526101a0526101805261016052610140526103405160005260206000f3005b63cd7724c360005114156128d757602060046101403734156127fc57600080fd5b6000610140511161280c57600080fd5b6006543b61281957600080fd5b60065430141561282857600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61284e57600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e051610200516389f2a871610220526101405161024052303161026052610160516102805261028051610260516102405160065801610859565b6102e052610200526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f3005b6359e9486260005114156129e657602060046101403734156128f857600080fd5b6000610140511161290857600080fd5b6006543b61291557600080fd5b60065430141561292457600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61294a57600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e051610200516102205163fd11c223610240526101405161026052303161028052610160516102a0526102a0516102805161026051600658016109d5565b6103005261022052610200526101e0526101c0526101a05261018052610160526101405261030051610220526001610220510260005260206000f3005b6395b68fe76000511415612af55760206004610140373415612a0757600080fd5b60006101405111612a1757600080fd5b6006543b612a2457600080fd5b600654301415612a3357600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa612a5957600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e05161020051610220516389f2a871610240526101405161026052610160516102805230316102a0526102a051610280516102605160065801610859565b6103005261022052610200526101e0526101c0526101a05261018052610160526101405261030051610220526001610220510260005260206000f3005b632640f62c6000511415612bf15760206004610140373415612b1657600080fd5b60006101405111612b2657600080fd5b6006543b612b3357600080fd5b600654301415612b4257600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa612b6857600080fd5b60005061020051610160526101405161016051610180516101a0516101c0516101e0516102005163fd11c2236102205261014051610240526101605161026052303161028052610280516102605161024051600658016109d5565b6102e052610200526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f3005b639d76ea586000511415612c17573415612c0a57600080fd5b60065460005260206000f3005b63966dae0e6000511415612c3d573415612c3057600080fd5b60075460005260206000f3005b6370a082316000511415612c8c5760206004610140373415612c5e57600080fd5b6004356020518110612c6f57600080fd5b5060046101405160e05260c052604060c0205460005260206000f3005b63a9059cbb6000511415612d575760406004610140373415612cad57600080fd5b6004356020518110612cbe57600080fd5b5060043360e05260c052604060c0206101605181541015612cde57600080fd5b6101605181540381555060046101405160e05260c052604060c0208054610160518254011015612d0d57600080fd5b61016051815401815550610160516101805261014051337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610180a3600160005260206000f3005b6323b872dd6000511415612e725760606004610140373415612d7857600080fd5b6004356020518110612d8957600080fd5b506024356020518110612d9b57600080fd5b5060046101405160e05260c052604060c0206101805181541015612dbe57600080fd5b6101805181540381555060046101605160e05260c052604060c0208054610180518254011015612ded57600080fd5b6101805181540181555060056101405160e05260c052604060c0203360e05260c052604060c0206101805181541015612e2557600080fd5b61018051815403815550610180516101a05261016051610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a3600160005260206000f3005b63095ea7b36000511415612f075760406004610140373415612e9357600080fd5b6004356020518110612ea457600080fd5b506101605160053360e05260c052604060c0206101405160e05260c052604060c02055610160516101805261014051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610180a3600160005260206000f3005b63dd62ed3e6000511415612f775760406004610140373415612f2857600080fd5b6004356020518110612f3957600080fd5b506024356020518110612f4b57600080fd5b5060056101405160e05260c052604060c0206101605160e05260c052604060c0205460005260206000f3005b6306fdde036000511415612f9d573415612f9057600080fd5b60005460005260206000f3005b6395d89b416000511415612fc3573415612fb657600080fd5b60015460005260206000f3005b63313ce5676000511415612fe9573415612fdc57600080fd5b60025460005260206000f3005b6318160ddd600051141561300f57341561300257600080fd5b60035460005260206000f3005b638c717a33610140523461016052600161018052426101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610c02565b61024052610240",
  "source": "# @title Uniswap Exchange Interface V1\n# @notice Source code found at https://github.com/uniswap\n# @notice Use at your own risk\n\ncontract Factory():\n    def getExchange(token_id: uint256) -> address: constant\n\ncontract Exchange():\n    def getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei): constant\n    def ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei): modifying\n\nTokenPurchase: event({buyer: indexed(address), eth_sold: indexed(uint256(wei)), tokens_bought: indexed(uint256)})\nEthPurchase: event({buyer: indexed(address), tokens_sold: indexed(uint256), eth_bought: indexed(uint256(wei))})\nAddLiquidity: event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\nRemoveLiquidity: event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\n\nname: public(bytes32)                             # Uniswap V1\nsymbol: public(bytes32)                           # UNI-V1\ndecimals: public(uint256)                         # 18\ntotalSupply: public(uint256)                      # total number of UNI in existence\nbalances: uint256[address]                        # UNI balance of an address\nallowances: (uint256[address])[address]           # UNI allowance of one address on another\ntoken: address(ERC20)                             # address of the ERC20 token traded on this contract\nfactory: Factory                                  # interface for the factory that created this contract\ntokenId: uint256                                 # Custom addition - token id\n\n# @dev This function acts as a contract constructor which is not currently supported in contracts deployed\n#      using create_with_code_of(). It is called once by the factory during contract creation.\n@public\ndef setup(token_addr: address, token_id: uint256):\n    assert (self.factory == ZERO_ADDRESS and self.token == ZERO_ADDRESS) and token_addr != ZERO_ADDRESS\n    self.factory = msg.sender\n    self.token = token_addr\n    self.tokenId = token_id\n    self.name = 0x556e697377617020563100000000000000000000000000000000000000000000\n    self.symbol = 0x554e492d56310000000000000000000000000000000000000000000000000000\n    self.decimals = 18\n\n# @notice Deposit ETH and Tokens (self.token) at current ratio to mint UNI tokens.\n# @dev min_liquidity does nothing when total UNI supply is 0.\n# @param min_liquidity Minimum number of UNI sender will mint if total UNI supply is greater than 0.\n# @param max_tokens Maximum number of tokens deposited. Deposits max amount if total UNI supply is 0.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return The amount of UNI minted.\n@public\n@payable\ndef addLiquidity(min_liquidity: uint256, max_tokens: uint256, deadline: timestamp) -> uint256:\n    assert deadline > block.timestamp and (max_tokens > 0 and msg.value > 0)\n    total_liquidity: uint256 = self.totalSupply\n    if total_liquidity > 0:\n        assert min_liquidity > 0\n        eth_reserve: uint256(wei) = self.balance - msg.value\n        token_reserve: uint256 = self.token.balanceOf(self)\n        token_amount: uint256 = msg.value * token_reserve / eth_reserve + 1\n        liquidity_minted: uint256 = msg.value * total_liquidity / eth_reserve\n        assert max_tokens >= token_amount and liquidity_minted >= min_liquidity\n        self.balances[msg.sender] += liquidity_minted\n        self.totalSupply = total_liquidity + liquidity_minted\n        assert self.token.transferFrom(msg.sender, self, token_amount)\n        log.AddLiquidity(msg.sender, msg.value, token_amount)\n        log.Transfer(ZERO_ADDRESS, msg.sender, liquidity_minted)\n        return liquidity_minted\n    else:\n        assert (self.factory != ZERO_ADDRESS and self.token != ZERO_ADDRESS) and msg.value >= 1000000000\n        assert self.factory.getExchange(self.tokenId) == self\n        token_amount: uint256 = max_tokens\n        initial_liquidity: uint256 = as_unitless_number(self.balance)\n        self.totalSupply = initial_liquidity\n        self.balances[msg.sender] = initial_liquidity\n        assert self.token.transferFrom(msg.sender, self, token_amount)\n        log.AddLiquidity(msg.sender, msg.value, token_amount)\n        log.Transfer(ZERO_ADDRESS, msg.sender, initial_liquidity)\n        return initial_liquidity\n\n# @dev Burn UNI tokens to withdraw ETH and Tokens at current ratio.\n# @param amount Amount of UNI burned.\n# @param min_eth Minimum ETH withdrawn.\n# @param min_tokens Minimum Tokens withdrawn.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return The amount of ETH and Tokens withdrawn.\n@public\ndef removeLiquidity(amount: uint256, min_eth: uint256(wei), min_tokens: uint256, deadline: timestamp) -> (uint256(wei), uint256):\n    assert (amount > 0 and deadline > block.timestamp) and (min_eth > 0 and min_tokens > 0)\n    total_liquidity: uint256 = self.totalSupply\n    assert total_liquidity > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_amount: uint256(wei) = amount * self.balance / total_liquidity\n    token_amount: uint256 = amount * token_reserve / total_liquidity\n    assert eth_amount >= min_eth and token_amount >= min_tokens\n    self.balances[msg.sender] -= amount\n    self.totalSupply = total_liquidity - amount\n    send(msg.sender, eth_amount)\n    assert self.token.transfer(msg.sender, token_amount)\n    log.RemoveLiquidity(msg.sender, eth_amount, token_amount)\n    log.Transfer(msg.sender, ZERO_ADDRESS, amount)\n    return eth_amount, token_amount\n\n# @dev Pricing function for converting between ETH and Tokens.\n# @param input_amount Amount of ETH or Tokens being sold.\n# @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\n# @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\n# @return Amount of ETH or Tokens bought.\n@private\n@constant\ndef getInputPrice(input_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:\n    assert input_reserve > 0 and output_reserve > 0\n    input_amount_with_fee: uint256 = input_amount * 997\n    numerator: uint256 = input_amount_with_fee * output_reserve\n    denominator: uint256 = (input_reserve * 1000) + input_amount_with_fee\n    return numerator / denominator\n\n# @dev Pricing function for converting between ETH and Tokens.\n# @param output_amount Amount of ETH or Tokens being bought.\n# @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\n# @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\n# @return Amount of ETH or Tokens sold.\n@private\n@constant\ndef getOutputPrice(output_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:\n    assert input_reserve > 0 and output_reserve > 0\n    numerator: uint256 = input_reserve * output_amount * 1000\n    denominator: uint256 = (output_reserve - output_amount) * 997\n    return numerator / denominator + 1\n\n@private\ndef ethToTokenInput(eth_sold: uint256(wei), min_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:\n    assert deadline >= block.timestamp and (eth_sold > 0 and min_tokens > 0)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    tokens_bought: uint256 = self.getInputPrice(as_unitless_number(eth_sold), as_unitless_number(self.balance - eth_sold), token_reserve)\n    assert tokens_bought >= min_tokens\n    assert self.token.transfer(recipient, tokens_bought)\n    log.TokenPurchase(buyer, eth_sold, tokens_bought)\n    return tokens_bought\n\n# @notice Convert ETH to Tokens.\n# @dev User specifies exact input (msg.value).\n# @dev User cannot specify minimum output or deadline.\n@public\n@payable\ndef __default__():\n    self.ethToTokenInput(msg.value, 1, block.timestamp, msg.sender, msg.sender)\n\n# @notice Convert ETH to Tokens.\n# @dev User specifies exact input (msg.value) and minimum output.\n# @param min_tokens Minimum Tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of Tokens bought.\n@public\n@payable\ndef ethToTokenSwapInput(min_tokens: uint256, deadline: timestamp) -> uint256:\n    return self.ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, msg.sender)\n\n# @notice Convert ETH to Tokens and transfers Tokens to recipient.\n# @dev User specifies exact input (msg.value) and minimum output\n# @param min_tokens Minimum Tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output Tokens.\n# @return Amount of Tokens bought.\n@public\n@payable\ndef ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, recipient)\n\n@private\ndef ethToTokenOutput(tokens_bought: uint256, max_eth: uint256(wei), deadline: timestamp, buyer: address, recipient: address) -> uint256(wei):\n    assert deadline >= block.timestamp and (tokens_bought > 0 and max_eth > 0)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance - max_eth), token_reserve)\n    # Throws if eth_sold > max_eth\n    eth_refund: uint256(wei) = max_eth - as_wei_value(eth_sold, 'wei')\n    if eth_refund > 0:\n        send(buyer, eth_refund)\n    assert self.token.transfer(recipient, tokens_bought)\n    log.TokenPurchase(buyer, as_wei_value(eth_sold, 'wei'), tokens_bought)\n    return as_wei_value(eth_sold, 'wei')\n\n# @notice Convert ETH to Tokens.\n# @dev User specifies maximum input (msg.value) and exact output.\n# @param tokens_bought Amount of tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of ETH sold.\n@public\n@payable\ndef ethToTokenSwapOutput(tokens_bought: uint256, deadline: timestamp) -> uint256(wei):\n    return self.ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, msg.sender)\n\n# @notice Convert ETH to Tokens and transfers Tokens to recipient.\n# @dev User specifies maximum input (msg.value) and exact output.\n# @param tokens_bought Amount of tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output Tokens.\n# @return Amount of ETH sold.\n@public\n@payable\ndef ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei):\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, recipient)\n\n@private\ndef tokenToEthInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, buyer: address, recipient: address) -> uint256(wei):\n\n    assert deadline >= block.timestamp and (tokens_sold > 0 and min_eth > 0)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\n    wei_bought: uint256(wei) = as_wei_value(eth_bought, 'wei')\n    assert wei_bought >= min_eth\n    send(recipient, wei_bought)\n    # return 0\n    \"\"\" \"\"\"\n    assert self.token.transferFrom(buyer, self, tokens_sold)\n    log.EthPurchase(buyer, tokens_sold, wei_bought)\n    return wei_bought\n\n\n# @notice Convert Tokens to ETH.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_eth Minimum ETH purchased.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of ETH bought.\n@public\ndef tokenToEthSwapInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp) -> uint256(wei):\n    return self.tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, msg.sender)\n\n# @notice Convert Tokens to ETH and transfers ETH to recipient.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_eth Minimum ETH purchased.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @return Amount of ETH bought.\n@public\ndef tokenToEthTransferInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, recipient: address) -> uint256(wei):\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, recipient)\n\n@private\ndef tokenToEthOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:\n    assert deadline >= block.timestamp and eth_bought > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\n    # tokens sold is always > 0\n    assert max_tokens >= tokens_sold\n    send(recipient, eth_bought)\n    assert self.token.transferFrom(buyer, self, tokens_sold)\n    log.EthPurchase(buyer, tokens_sold, eth_bought)\n    return tokens_sold\n\n# @notice Convert Tokens to ETH.\n# @dev User specifies maximum input and exact output.\n# @param eth_bought Amount of ETH purchased.\n# @param max_tokens Maximum Tokens sold.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of Tokens sold.\n@public\ndef tokenToEthSwapOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp) -> uint256:\n    return self.tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, msg.sender)\n\n# @notice Convert Tokens to ETH and transfers ETH to recipient.\n# @dev User specifies maximum input and exact output.\n# @param eth_bought Amount of ETH purchased.\n# @param max_tokens Maximum Tokens sold.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @return Amount of Tokens sold.\n@public\ndef tokenToEthTransferOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, recipient)\n\n@private\ndef tokenToTokenInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:\n    assert (deadline >= block.timestamp and tokens_sold > 0) and (min_tokens_bought > 0 and min_eth_bought > 0)\n    assert exchange_addr != self and exchange_addr != ZERO_ADDRESS\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\n    wei_bought: uint256(wei) = as_wei_value(eth_bought, 'wei')\n    assert wei_bought >= min_eth_bought\n    assert self.token.transferFrom(buyer, self, tokens_sold)\n    tokens_bought: uint256 = Exchange(exchange_addr).ethToTokenTransferInput(min_tokens_bought, deadline, recipient, value=wei_bought)\n    log.EthPurchase(buyer, tokens_sold, wei_bought)\n    return tokens_bought\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr).\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (token_addr) bought.\n@public\ndef tokenToTokenSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, token_addr: uint256) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers\n#         Tokens (token_addr) to recipient.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (token_addr) bought.\n@public\ndef tokenToTokenTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, token_addr: uint256) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr)\n\n@private\ndef tokenToTokenOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:\n    assert deadline >= block.timestamp and (tokens_bought > 0 and max_eth_sold > 0)\n    assert exchange_addr != self and exchange_addr != ZERO_ADDRESS\n    eth_bought: uint256(wei) = Exchange(exchange_addr).getEthToTokenOutputPrice(tokens_bought)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\n    # tokens sold is always > 0\n    assert max_tokens_sold >= tokens_sold and max_eth_sold >= eth_bought\n    assert self.token.transferFrom(buyer, self, tokens_sold)\n    eth_sold: uint256(wei) = Exchange(exchange_addr).ethToTokenTransferOutput(tokens_bought, deadline, recipient, value=eth_bought)\n    log.EthPurchase(buyer, tokens_sold, eth_bought)\n    return tokens_sold\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr).\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, token_addr: uint256) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers\n#         Tokens (token_addr) to recipient.\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToTokenTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, token_addr: uint256) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param exchange_addr The address of the exchange for the token being purchased.\n# @return Amount of Tokens (exchange_addr.token) bought.\n@public\ndef tokenToExchangeSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256:\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers\n#         Tokens (exchange_addr.token) to recipient.\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param exchange_addr The address of the exchange for the token being purchased.\n# @return Amount of Tokens (exchange_addr.token) bought.\n@public\ndef tokenToExchangeTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:\n    assert recipient != self\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param exchange_addr The address of the exchange for the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToExchangeSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256:\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers\n#         Tokens (exchange_addr.token) to recipient.\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToExchangeTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:\n    assert recipient != self\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr)\n\n# @notice Public price function for ETH to Token trades with an exact input.\n# @param eth_sold Amount of ETH sold.\n# @return Amount of Tokens that can be bought with input ETH.\n@public\n@constant\ndef getEthToTokenInputPrice(eth_sold: uint256(wei)) -> uint256:\n    assert eth_sold > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    return self.getInputPrice(as_unitless_number(eth_sold), as_unitless_number(self.balance), token_reserve)\n\n# @notice Public price function for ETH to Token trades with an exact output.\n# @param tokens_bought Amount of Tokens bought.\n# @return Amount of ETH needed to buy output Tokens.\n@public\n@constant\ndef getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei):\n    assert tokens_bought > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance), token_reserve)\n    return as_wei_value(eth_sold, 'wei')\n\n# @notice Public price function for Token to ETH trades with an exact input.\n# @param tokens_sold Amount of Tokens sold.\n# @return Amount of ETH that can be bought with input Tokens.\n@public\n@constant\ndef getTokenToEthInputPrice(tokens_sold: uint256) -> uint256(wei):\n    assert tokens_sold > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\n    return as_wei_value(eth_bought, 'wei')\n\n# @notice Public price function for Token to ETH trades with an exact output.\n# @param eth_bought Amount of output ETH.\n# @return Amount of Tokens needed to buy output ETH.\n@public\n@constant\ndef getTokenToEthOutputPrice(eth_bought: uint256(wei)) -> uint256:\n    assert eth_bought > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    return self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\n\n# @return Address of Token that is sold on this exchange.\n@public\n@constant\ndef tokenAddress() -> address:\n    return self.token\n\n# @return Address of factory that created this exchange.\n@public\n@constant\ndef factoryAddress() -> address(Factory):\n    return self.factory\n\n# ERC20 compatibility for exchange liquidity modified from\n# https://github.com/ethereum/vyper/blob/master/examples/tokens/ERC20.vy\n@public\n@constant\ndef balanceOf(_owner : address) -> uint256:\n    return self.balances[_owner]\n\n@public\ndef transfer(_to : address, _value : uint256) -> bool:\n    self.balances[msg.sender] -= _value\n    self.balances[_to] += _value\n    log.Transfer(msg.sender, _to, _value)\n    return True\n\n@public\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n    self.balances[_from] -= _value\n    self.balances[_to] += _value\n    self.allowances[_from][msg.sender] -= _value\n    log.Transfer(_from, _to, _value)\n    return True\n\n@public\ndef approve(_spender : address, _value : uint256) -> bool:\n    self.allowances[msg.sender][_spender] = _value\n    log.Approval(msg.sender, _spender, _value)\n    return True\n\n@public\n@constant\ndef allowance(_owner : address, _spender : address) -> uint256:\n    return self.allowances[_owner][_spender]\n",
  "sourcePath": "/Users/jg/Documents/aaveBot/contracts/uniswap_exchange_custom.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b4"
  },
  "networks": {
    "42": {
      "events": {
        "0xcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f": {
          "name": "TokenPurchase",
          "inputs": [
            {
              "type": "address",
              "name": "buyer",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "eth_sold",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "tokens_bought",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f"
        },
        "0x7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b353984238705": {
          "name": "EthPurchase",
          "inputs": [
            {
              "type": "address",
              "name": "buyer",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "tokens_sold",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "eth_bought",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b353984238705"
        },
        "0x06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca": {
          "name": "AddLiquidity",
          "inputs": [
            {
              "type": "address",
              "name": "provider",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "eth_amount",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "token_amount",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca"
        },
        "0x0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e8": {
          "name": "RemoveLiquidity",
          "inputs": [
            {
              "type": "address",
              "name": "provider",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "eth_amount",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "token_amount",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e8"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "name": "Transfer",
          "inputs": [
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_to",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "_value",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "name": "Approval",
          "inputs": [
            {
              "type": "address",
              "name": "_owner",
              "indexed": true
            },
            {
              "type": "address",
              "name": "_spender",
              "indexed": true
            },
            {
              "type": "uint256",
              "name": "_value",
              "indexed": false
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        }
      },
      "links": {},
      "address": "0xd0b5a2558DaaFA9B7E4002cB98746769a7CB6EC1",
      "transactionHash": "0xb56360e57b025a43509bcf34c0f94dfdfb049412144db5357535b3621cd4e929"
    }
  },
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-11-08T10:19:44.809Z"
}